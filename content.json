{"meta":{"title":"jondya的博客","subtitle":"","description":"","author":"jondya","url":"https://jondya.github.io","root":"/"},"pages":[{"title":"","date":"2020-05-01T13:50:58.792Z","updated":"2020-05-01T13:50:49.511Z","comments":true,"path":"404.html","permalink":"https://jondya.github.io/404.html","excerpt":"","text":"+layout: false +--- 404 L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/koharu.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});"},{"title":"about","date":"2020-05-01T13:46:10.000Z","updated":"2020-05-01T13:46:10.610Z","comments":true,"path":"about/index.html","permalink":"https://jondya.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-04-30T16:03:57.000Z","updated":"2020-05-01T14:19:36.860Z","comments":false,"path":"categories/index.html","permalink":"https://jondya.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-01T03:35:42.000Z","updated":"2020-05-01T14:19:52.415Z","comments":false,"path":"tags/index.html","permalink":"https://jondya.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-03T03:15:29.295Z","updated":"2020-05-02T01:50:02.249Z","comments":true,"path":"js/cursor/explosion.min.js","permalink":"https://jondya.github.io/js/cursor/explosion.min.js","excerpt":"","text":"\"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=.1,a.alpha=.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t"},{"title":"","date":"2020-05-02T04:36:49.430Z","updated":"2020-05-02T01:48:38.684Z","comments":true,"path":"js/cursor/fireworks.js","permalink":"https://jondya.github.io/js/cursor/fireworks.js","excerpt":"","text":"class Circle { constructor({ origin, speed, color, angle, context }) { this.origin = origin this.position = { ...this.origin } this.color = color this.speed = speed this.angle = angle this.context = context this.renderCount = 0 } draw() { this.context.fillStyle = this.color this.context.beginPath() this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2) this.context.fill() } move() { this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3) this.renderCount++ } } class Boom { constructor ({ origin, context, circleCount = 16, area }) { this.origin = origin this.context = context this.circleCount = circleCount this.area = area this.stop = false this.circles = [] } randomArray(range) { const length = range.length const randomIndex = Math.floor(length * Math.random()) return range[randomIndex] } randomColor() { const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) } randomRange(start, end) { return (end - start) * Math.random() + start } init() { for(let i = 0; i < this.circleCount; i++) { const circle = new Circle({ context: this.context, origin: this.origin, color: this.randomColor(), angle: this.randomRange(Math.PI - 1, Math.PI + 1), speed: this.randomRange(1, 6) }) this.circles.push(circle) } } move() { this.circles.forEach((circle, index) => { if (circle.position.x > this.area.width || circle.position.y > this.area.height) { return this.circles.splice(index, 1) } circle.move() }) if (this.circles.length == 0) { this.stop = true } } draw() { this.circles.forEach(circle => circle.draw()) } } class CursorSpecialEffects { constructor() { this.computerCanvas = document.createElement('canvas') this.renderCanvas = document.createElement('canvas') this.computerContext = this.computerCanvas.getContext('2d') this.renderContext = this.renderCanvas.getContext('2d') this.globalWidth = window.innerWidth this.globalHeight = window.innerHeight this.booms = [] this.running = false } handleMouseDown(e) { const boom = new Boom({ origin: { x: e.clientX, y: e.clientY }, context: this.computerContext, area: { width: this.globalWidth, height: this.globalHeight } }) boom.init() this.booms.push(boom) this.running || this.run() } handlePageHide() { this.booms = [] this.running = false } init() { const style = this.renderCanvas.style style.position = 'fixed' style.top = style.left = 0 style.zIndex = '999999999999999999999999999999999999999999' style.pointerEvents = 'none' style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight document.body.append(this.renderCanvas) window.addEventListener('mousedown', this.handleMouseDown.bind(this)) window.addEventListener('pagehide', this.handlePageHide.bind(this)) } run() { this.running = true if (this.booms.length == 0) { return this.running = false } requestAnimationFrame(this.run.bind(this)) this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.booms.forEach((boom, index) => { if (boom.stop) { return this.booms.splice(index, 1) } boom.move() boom.draw() }) this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight) } } const cursorSpecialEffects = new CursorSpecialEffects() cursorSpecialEffects.init()"},{"title":"","date":"2020-05-02T04:36:49.433Z","updated":"2020-05-02T01:52:41.571Z","comments":true,"path":"js/cursor/text.js","permalink":"https://jondya.github.io/js/cursor/text.js","excerpt":"","text":"var a_idx = 0; jQuery(document).ready(function($) { $(\"body\").click(function(e) { var a = new Array(\"喜欢我\", \"不喜欢我\"); var $i = $(\"\").text(a[a_idx]); var x = e.pageX, y = e.pageY; $i.css({ \"z-index\": 99999, \"top\": y - 28, \"left\": x - a[a_idx].length * 8, \"position\": \"absolute\", \"color\": \"#ff7a45\" }); $(\"body\").append($i); $i.animate({ \"top\": y - 180, \"opacity\": 0 }, 1500, function() { $i.remove(); }); a_idx = (a_idx + 1) % a.length; }); });"},{"title":"","date":"2020-05-02T04:36:49.431Z","updated":"2020-05-02T01:51:58.345Z","comments":true,"path":"js/cursor/love.min.js","permalink":"https://jondya.github.io/js/cursor/love.min.js","excerpt":"","text":"!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e"}],"posts":[{"title":"mybatis自动更新时间","slug":"mybatis自动填充","date":"2020-05-01T11:59:20.000Z","updated":"2020-05-02T13:11:06.893Z","comments":true,"path":"2020/05/01/mybatis自动填充/","link":"","permalink":"https://jondya.github.io/2020/05/01/mybatis%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/","excerpt":"在要填充的字段上加上TableField注解12345678910public class User &#123; // 注意！这里需要标记为填充字段 @TableField( fill = FieldFill.INSERT) // 在创建时更新 private String fillField; @TableField( fill = FieldFill.UPDATE) private String fillField2; @TableField( fill = FieldFill.INSERT_UPDATE) // 在创建和改变时更新 private String fillField3; &#125;","text":"在要填充的字段上加上TableField注解12345678910public class User &#123; // 注意！这里需要标记为填充字段 @TableField( fill = FieldFill.INSERT) // 在创建时更新 private String fillField; @TableField( fill = FieldFill.UPDATE) private String fillField2; @TableField( fill = FieldFill.INSERT_UPDATE) // 在创建和改变时更新 private String fillField3; &#125; 实现MetaObjectHandler接口1234567891011121314@Componentpublic class MyMetaObjectHandler implements MetaObjectHandler &#123; @Override public void insertFill(MetaObject metaObject) &#123; log.info(\"start insert fill ....\"); this.strictInsertFill(metaObject, \"createTime\", LocalDateTime.class, LocalDateTime.now()); &#125; @Override public void updateFill(MetaObject metaObject) &#123; log.info(\"start update fill ....\"); this.strictUpdateFill(metaObject, \"updateTime\", LocalDateTime.class, LocalDateTime.now()); &#125;&#125; mybatis-plus实现乐观锁1，在spring中注册OptimisticLockerInterceptor1234@Beanpublic OptimisticLockerInterceptor optimisticLockerInterceptor() &#123; return new OptimisticLockerInterceptor();&#125; 2，在实体类字段上加上version注解1234public class User &#123; @Version private Integer version;&#125; 注意！支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime","categories":[],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://jondya.github.io/tags/mybatis/"}]}],"categories":[],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://jondya.github.io/tags/mybatis/"}]}