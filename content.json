{"meta":{"title":"jondya的博客","subtitle":"","description":"","author":"jondya","url":"https://jondya.xyz","root":"/"},"pages":[{"title":"","date":"2020-05-01T13:50:58.792Z","updated":"2020-05-01T13:50:49.511Z","comments":true,"path":"404.html","permalink":"https://jondya.xyz/404.html","excerpt":"","text":"+layout: false +--- 404 L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/koharu.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":false},\"react\":{\"opacity\":0.7},\"log\":false});"},{"title":"about","date":"2020-05-01T13:46:10.000Z","updated":"2020-05-01T13:46:10.610Z","comments":true,"path":"about/index.html","permalink":"https://jondya.xyz/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-04-30T16:03:57.000Z","updated":"2020-05-01T14:19:36.860Z","comments":false,"path":"categories/index.html","permalink":"https://jondya.xyz/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-01T03:35:42.000Z","updated":"2020-05-01T14:19:52.415Z","comments":false,"path":"tags/index.html","permalink":"https://jondya.xyz/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-05-03T03:15:29.295Z","updated":"2020-05-02T01:50:02.249Z","comments":true,"path":"js/cursor/explosion.min.js","permalink":"https://jondya.xyz/js/cursor/explosion.min.js","excerpt":"","text":"\"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=.1,a.alpha=.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t"},{"title":"","date":"2020-05-02T04:36:49.430Z","updated":"2020-05-02T01:48:38.684Z","comments":true,"path":"js/cursor/fireworks.js","permalink":"https://jondya.xyz/js/cursor/fireworks.js","excerpt":"","text":"class Circle { constructor({ origin, speed, color, angle, context }) { this.origin = origin this.position = { ...this.origin } this.color = color this.speed = speed this.angle = angle this.context = context this.renderCount = 0 } draw() { this.context.fillStyle = this.color this.context.beginPath() this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2) this.context.fill() } move() { this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3) this.renderCount++ } } class Boom { constructor ({ origin, context, circleCount = 16, area }) { this.origin = origin this.context = context this.circleCount = circleCount this.area = area this.stop = false this.circles = [] } randomArray(range) { const length = range.length const randomIndex = Math.floor(length * Math.random()) return range[randomIndex] } randomColor() { const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) } randomRange(start, end) { return (end - start) * Math.random() + start } init() { for(let i = 0; i < this.circleCount; i++) { const circle = new Circle({ context: this.context, origin: this.origin, color: this.randomColor(), angle: this.randomRange(Math.PI - 1, Math.PI + 1), speed: this.randomRange(1, 6) }) this.circles.push(circle) } } move() { this.circles.forEach((circle, index) => { if (circle.position.x > this.area.width || circle.position.y > this.area.height) { return this.circles.splice(index, 1) } circle.move() }) if (this.circles.length == 0) { this.stop = true } } draw() { this.circles.forEach(circle => circle.draw()) } } class CursorSpecialEffects { constructor() { this.computerCanvas = document.createElement('canvas') this.renderCanvas = document.createElement('canvas') this.computerContext = this.computerCanvas.getContext('2d') this.renderContext = this.renderCanvas.getContext('2d') this.globalWidth = window.innerWidth this.globalHeight = window.innerHeight this.booms = [] this.running = false } handleMouseDown(e) { const boom = new Boom({ origin: { x: e.clientX, y: e.clientY }, context: this.computerContext, area: { width: this.globalWidth, height: this.globalHeight } }) boom.init() this.booms.push(boom) this.running || this.run() } handlePageHide() { this.booms = [] this.running = false } init() { const style = this.renderCanvas.style style.position = 'fixed' style.top = style.left = 0 style.zIndex = '999999999999999999999999999999999999999999' style.pointerEvents = 'none' style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight document.body.append(this.renderCanvas) window.addEventListener('mousedown', this.handleMouseDown.bind(this)) window.addEventListener('pagehide', this.handlePageHide.bind(this)) } run() { this.running = true if (this.booms.length == 0) { return this.running = false } requestAnimationFrame(this.run.bind(this)) this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight) this.booms.forEach((boom, index) => { if (boom.stop) { return this.booms.splice(index, 1) } boom.move() boom.draw() }) this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight) } } const cursorSpecialEffects = new CursorSpecialEffects() cursorSpecialEffects.init()"},{"title":"","date":"2020-05-02T04:36:49.433Z","updated":"2020-05-02T01:52:41.571Z","comments":true,"path":"js/cursor/text.js","permalink":"https://jondya.xyz/js/cursor/text.js","excerpt":"","text":"var a_idx = 0; jQuery(document).ready(function($) { $(\"body\").click(function(e) { var a = new Array(\"喜欢我\", \"不喜欢我\"); var $i = $(\"\").text(a[a_idx]); var x = e.pageX, y = e.pageY; $i.css({ \"z-index\": 99999, \"top\": y - 28, \"left\": x - a[a_idx].length * 8, \"position\": \"absolute\", \"color\": \"#ff7a45\" }); $(\"body\").append($i); $i.animate({ \"top\": y - 180, \"opacity\": 0 }, 1500, function() { $i.remove(); }); a_idx = (a_idx + 1) % a.length; }); });"},{"title":"","date":"2020-05-02T04:36:49.431Z","updated":"2020-05-02T01:51:58.345Z","comments":true,"path":"js/cursor/love.min.js","permalink":"https://jondya.xyz/js/cursor/love.min.js","excerpt":"","text":"!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e"}],"posts":[{"title":"thymeleaf常用标签用法","slug":"thymeleaf部分标签用法","date":"2021-01-24T13:03:53.000Z","updated":"2021-01-24T13:47:37.822Z","comments":true,"path":"archives/49400.html","link":"","permalink":"https://jondya.xyz/archives/49400.html","excerpt":"thymeleaf部分常用标签的用法","text":"thymeleaf部分常用标签的用法 首先引入标签库1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; thymeleaf模板引擎取值12&lt;h1 th:text=\"$&#123;message&#125;\"&gt;hello world&lt;/h1&gt;&lt;h1&gt;[[$&#123;message&#125;]]&lt;/h1&gt; th:text设置标签内的文本内容12&lt;h1 th:text=\"$&#123;message&#125;\"&gt;hello world&lt;/h1&gt;&lt;!--用来设置文本--&gt; th:href,th:src和th:action指定资源路径123&lt;link th:href=\"@&#123;/css/style.css&#125;\" rel=\"stylesheet\"&gt;&lt;script th:src=\"@&#123;/js/jquery-3.5.1.min.js&#125;\"&gt;&lt;/script&gt;&lt;form th:action=\"@&#123;/login&#125;\"&gt;&lt;/form&gt; th:if , th:unless用于判断是否显示指定内容123456789&lt;h1 th:if=\"&#123;isAdmin&#125;\"&gt;admin&lt;/h1&gt;&lt;!--如果值是true，则打印整个节点--&gt;&lt;!--下列条件也判定为真--&gt;&lt;!--值非空--&gt;&lt;!--值是character，但是非0--&gt;&lt;!--值是非0数字--&gt;&lt;!--值是字符串，但是不是 “false”, “off” or “no”--&gt;&lt;!--值不是boolean值，数字，character 或 字符串--&gt;&lt;!--th:unless功能与th:if相反--&gt; th:each一般用于遍历结果集123456789101112131415161718&lt;table border=\"2\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;name&lt;/th&gt; &lt;th&gt;age&lt;/th&gt; &lt;th&gt;isAdmin&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;!-- 常用的迭代 th:each 用法 --&gt; &lt;!--如果user后不指定迭代状态则默认为当前对象user+Stat即userStat--&gt; &lt;tr th:each=\"user : $&#123;userList&#125;\"&gt; &lt;td th:text=\"$&#123;user.name&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;user.age&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;user.isAdmin&#125;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; userStat属性： index ：当前节点的索引，从0开始 size ： 迭代节点总数 even/odd：当前是偶数/奇数行，boolean值 first/last：当前是第一个/最后一个元素 ，boolean值","categories":[{"name":"html","slug":"html","permalink":"https://jondya.xyz/categories/html/"}],"tags":[{"name":"thymeleaf","slug":"thymeleaf","permalink":"https://jondya.xyz/tags/thymeleaf/"}]},{"title":"spring-security基础使用","slug":"spring-security基础使用","date":"2021-01-24T06:37:01.000Z","updated":"2021-01-24T12:47:30.574Z","comments":true,"path":"archives/57296.html","link":"","permalink":"https://jondya.xyz/archives/57296.html","excerpt":"使用spring security进行登录验证","text":"使用spring security进行登录验证 编写配置类继承WebSecurityConfigurerAdapter123public class SecurityConfig extends WebSecurityConfigurerAdapter&#123; &#125; 实现UserDetailsService接口12345678910111213141516171819202122232425@Servicepublic class UserDetailsServiceImpl implements UserDetailsService &#123; @Resource private MyUserMapper userMapper; @Resource private PasswordEncoder passwordEncoder; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123; // 根据传入的用户名从数据库里查询信息 MyUser myUser = userMapper.selectByPrimaryKey(username); // 如果没有查到则抛出异常 if (myUser == null) &#123; throw new UsernameNotFoundException(\"用户名不存在\"); &#125; // 设置用户角色 List&lt;GrantedAuthority&gt; role = AuthorityUtils.commaSeparatedStringToAuthorityList(myUser.getrole()); // 将查询到的数据封装到User中返回 return new User(username,passwordEncoder.encode(myUser.getPwd()),role); &#125;&#125; 重写configure方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123; @Resource private UserDetailsService userDetailsService; @Resource private DataSource dataSource; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; // 验证用户名密码是否正确，使用passwordEncoder对密码进行加密 auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder()); &#125; @Override protected void configure(HttpSecurity http) throws Exception &#123; // 设置登录界面url,以及登录成功默认跳转页面 http .formLogin().loginPage(\"/login\").defaultSuccessUrl(\"/\") // 设置自定义403页面 .and() .exceptionHandling().accessDeniedPage(\"/403\") // 设置注销跳转页面 .and() .logout().logoutSuccessUrl(\"/login\") // 设置不拦截哪些请求 .and() .authorizeRequests().antMatchers(\"/login/**\",\"/oauth/**\",\"/logout/**\").permitAll() // 设置只有指定角色才能访问的页面,hasrole需要在UserDetailsService里设置角色时加上ROLE_前缀 .antMatchers(\"/xxx\").hasrole(\"xxx\") .antMatchers(\"/xxx\").hasAuthority(\"xxx\") // 实现remember-me .and().rememberMe().tokenRepository(persistentTokenRepository()) .tokenValiditySeconds(3600).userDetailsService(userDetailsService) // 设置任何请求都需要验证 .anyRequest().authenticated() // 关闭csrf防护 .and() .csrf().disable(); &#125; @Override public void configure(WebSecurity web) throws Exception &#123; // 不拦截对静态资源的请求 web.ignoring().antMatchers(\"/res/**\"); &#125; // 向容器注册加密器 @Bean public BCryptPasswordEncoder bCryptPasswordEncoder() &#123; return new BCryptPasswordEncoder(); &#125; // 实现remember-me @Bean public PersistentTokenRepository persistentTokenRepository() &#123; JdbcTokenRepositoryImpl jdbcTokenRepository = new JdbcTokenRepositoryImpl(); jdbcTokenRepository.setDataSource(dataSource); jdbcTokenRepository.setCreateTableOnStartup(true); // 创建表,也可手动创建 return jdbcTokenRepository; &#125;&#125; 使用注解进行权限控制123@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true) // 配置类上加上这个注解@Secured(\"ROLE_admin\") @PreAuthorize(\"hasRole('ROLE_admin')\") // 两种注解方式控制权限 整合thymeleaf12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 sec:authorize=\"hasAnyRole('ROLE_admin,ROLE_teacher')\"&gt;admin&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"java","slug":"java","permalink":"https://jondya.xyz/categories/java/"}],"tags":[{"name":"spring","slug":"spring","permalink":"https://jondya.xyz/tags/spring/"}]},{"title":"启动和关闭nginx","slug":"启动和关闭nginx","date":"2021-01-22T09:00:38.000Z","updated":"2021-01-22T09:07:27.576Z","comments":true,"path":"archives/63688.html","link":"","permalink":"https://jondya.xyz/archives/63688.html","excerpt":"一些linux命令用来查看nginx的运行状态，以及启动，关闭nginx。","text":"一些linux命令用来查看nginx的运行状态，以及启动，关闭nginx。 启动nginx1systemctl start nginx 查看端口被谁占用1netstat -nap|grep 端口号 查看nginx进程1ps -ef|grep nginx 杀死进程1kill -s 9 进程号","categories":[{"name":"linux","slug":"linux","permalink":"https://jondya.xyz/categories/linux/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://jondya.xyz/tags/nginx/"}]},{"title":"使用jasypt对配置文件明文密码进行加密","slug":"配置文件中明文密码的加密","date":"2021-01-22T08:15:37.000Z","updated":"2021-01-24T06:39:51.799Z","comments":true,"path":"archives/19098.html","link":"","permalink":"https://jondya.xyz/archives/19098.html","excerpt":"在开发中，为了安全起见，配置文件中不应该存在明文密码，而应该对其进行加密，这篇文章主要介绍在springboot项目中使用jasypt来对配置文件进行加密。","text":"在开发中，为了安全起见，配置文件中不应该存在明文密码，而应该对其进行加密，这篇文章主要介绍在springboot项目中使用jasypt来对配置文件进行加密。 在pom.xml中导入jasypt-spring-boot-starter依赖12345&lt;dependency&gt; &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt; &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.3&lt;/version&gt;&lt;/dependency&gt; 设置jasypt.encryptor.passwordjasypt.encryptor.password是用来加密配置文件的密钥，所以最好不要写在配置文件中，可以通过配置系统环境变量例如： 123jasypt: encryptor: password: $&#123;JASYPT_ENCRYPTOR_PASSWORD&#125; 这种方式来得到。 在测试类中注入StringEncryptor调用encrypt方法得到加密后的密码123456789101112131415161718192021222324252627@SpringBootTestclass DemoApplicationTests &#123; @Autowired private ApplicationContext appCtx; @Autowired private StringEncryptor stringEncryptor; @Test void contextLoads() &#123; Environment environment = appCtx.getBean(Environment.class); String mysqlPwd = environment.getProperty(\"spring.datasource.password\"); String redisPwd = environment.getProperty(\"spring.redis.password\"); System.out.println(encrypt(mysqlPwd)); System.out.println(encrypt(redisPwd)); &#125; private String encrypt(String originPassword) &#123; return stringEncryptor.encrypt(originPassword); &#125; &#125; 最后将得到的密码以如下方式写入到配置文件中12345spring: datasource: password: ENC(得到的密码) redis: password: ENC(xxx)","categories":[{"name":"java","slug":"java","permalink":"https://jondya.xyz/categories/java/"}],"tags":[{"name":"spring","slug":"spring","permalink":"https://jondya.xyz/tags/spring/"}]},{"title":"阿里云安装MySQL8.0.20","slug":"阿里云安装MySQL8-0-20","date":"2020-05-04T00:55:24.000Z","updated":"2021-01-22T08:35:38.364Z","comments":true,"path":"archives/3221.html","link":"","permalink":"https://jondya.xyz/archives/3221.html","excerpt":"最近买的阿里云服务器安装mysql的时候遇到一些问题,做个记录,安装的MySQL版本为8.0.20，阿里云服务器系统是CentOS7.","text":"最近买的阿里云服务器安装mysql的时候遇到一些问题,做个记录,安装的MySQL版本为8.0.20，阿里云服务器系统是CentOS7. 下载MySQL在MySQL官网中下载YUM源rpm安装包执行如下的命令: 1wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm 安装MySQL源1yum localinstall mysql80-community-release-el7-1.noarch.rpm 安装MySQL输入以下命令,等待下载完成即可 1yum install mysql-community-server 启动MySQL启动命令1systemctl start mysqld 查看启动状态1systemctl status mysqld 下图的情况表示启动成功 设置开机启动12systemctl enable mysqldsystemctl daemon-reload 配置MySQL修改初始密码1,输入以下命令,在my.cnf中添加skip-grant-tables跳过密码验证,不然登录不了MySQL 1vim /etc/my.cnf 2,重启MySQL 1systemctl restart mysqld 3,登录MySQL,输入密码的时候回车即可 1mysql -uroot -p 4,将密码设为空, 12use mysql; // 选择MySQL数据库update user set authentication_string='' where user='root'; //将root用户密码设为空 5,退出MySQL重新编辑my.cnf,把skip-grant-tables去掉,重启MySQL 1systemctl restart mysqld 6,重新登陆MySQL 1mysql -uroot -p 7,修改密码,注意密码必须是大小写字母+数字+特殊字符 1alter user 'root'@'localhost' identified by 'xxx'; 8,修改host,让数据库支持远程连接 123update user set host ='%' where user='root';flush privileges; // 刷新systemctl restart mysqld //重启MySQL","categories":[{"name":"linux","slug":"linux","permalink":"https://jondya.xyz/categories/linux/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://jondya.xyz/tags/mysql/"}]}],"categories":[{"name":"html","slug":"html","permalink":"https://jondya.xyz/categories/html/"},{"name":"java","slug":"java","permalink":"https://jondya.xyz/categories/java/"},{"name":"linux","slug":"linux","permalink":"https://jondya.xyz/categories/linux/"}],"tags":[{"name":"thymeleaf","slug":"thymeleaf","permalink":"https://jondya.xyz/tags/thymeleaf/"},{"name":"spring","slug":"spring","permalink":"https://jondya.xyz/tags/spring/"},{"name":"nginx","slug":"nginx","permalink":"https://jondya.xyz/tags/nginx/"},{"name":"mysql","slug":"mysql","permalink":"https://jondya.xyz/tags/mysql/"}]}